---
apiVersion: v1
kind: Secret
metadata:
  name: mysql
  namespace: default
  labels:
    app: mysql
    user: jankow
type: Opaque
data:
  mysql_root_password: cGFzc3dvcmQ=
immutable: true

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: default
  name: mysql
  labels:
    app: mysql
    user: jankow
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: mysql
  labels:
    app: mysql
    user: jankow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
      user: jankow
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
        user: jankow
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
      containers:
        - name: mysql
          image: mysql:8
          ports:
            - containerPort: 3306
              name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD_FILE
              value: /etc/secrets/mysql_root_password
          volumeMounts:
            - name: secret-volume
              mountPath: /etc/secrets
              readOnly: true
            - name: mysql
              mountPath: /var/lib/mysql
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - ping
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            exec:
              command:
                - mysqladmin
                - ping
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 10
            successThreshold: 1
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: "600m"
              ephemeral-storage: "1Gi"
              memory: "500Mi"
            requests:
              cpu: "100m"
              ephemeral-storage: "1Gi"
              memory: "400Mi"
      volumes:
        - name: secret-volume
          secret:
            secretName: mysql
        - name: mysql
          persistentVolumeClaim:
            claimName: mysql
      
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: mysql
  labels:
    app: mysql
    user: jankow
  annotations:
    cloud.google.com/neg: '{"exposed_ports": {"3306":{}}}'
    external-dns.alpha.kubernetes.io/endpoints-type: NodeExternalIP
    external-dns.alpha.kubernetes.io/hostname: mysql.apps.classlab.pl
spec:
  type: NodePort
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
      protocol: TCP
  selector:
    app: mysql
    user: jankow

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mysql
  namespace: default
  labels:
    app: mysql
    user: jankow
spec:
  podSelector:
    matchLabels:
      app: mysql
      user: jankow
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - {}
  egress:
    - {}


---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: mysql
  namespace: default
spec:
  scaleTargetRef:
    name: mysql
  pollingInterval: 15
  cooldownPeriod: 600
  minReplicaCount: 0
  maxReplicaCount: 1
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 600
          policies:
          - type: Percent
            value: 100
            periodSeconds: 15
        scaleUp:
          selectPolicy: Disabled
  triggers:
    - type: prometheus
      metricType: Value
      metadata:
        serverAddress: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090
        query: max(max(sum(rate(container_fs_reads_total{container!="",job="kubelet",metrics_path="/metrics/cadvisor",pod=~"mysql.*"}[2m30s])+rate(container_fs_writes_total{container!="",job="kubelet",metrics_path="/metrics/cadvisor",pod=~"mysql.*"}[2m30s]))) * 100 > bool 10 or (time() - kube_pod_created{pod=~"mysql.*", namespace="default"} < bool 300))
        threshold: "1"
        ignoreNullValues: "false"